#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;
class student
{
int roll_no;
char name[30];
float SGPA;
public:
int size;
student()
{
size=3;
}
void accept( student list[]);
void display( student list[]);
void bubble_sort( student list[]);
void insert_sort( student list[]);
void quick_sort( student list[],int first,int last);
void search( student list[]);
void binary_search(student list[]);
};
// ACCEPT FUNCTION
void student:: accept(student list[])
{
int i;
for(i=0; i&lt;size; i++)
{
cout&lt;&lt;&quot;\nEnter Roll-Number, Name, SGPA:&quot;;
cin&gt;&gt;list[i].roll_no&gt;&gt;list[i].name&gt;&gt;list[i].SGPA;
}

}
// DISPLAY FUNCTION
void student::display( student list[])
{
int i;
cout&lt;&lt;&quot;\n Roll-Number \t Name \t SGPA \n&quot;;
for(int i=0; i&lt;size; i++)
{
cout&lt;&lt;&quot;\n &quot;&lt;&lt;list[i].roll_no&lt;&lt;&quot; \t &quot;&lt;&lt;list[i].name&lt;&lt;&quot;\t &quot;&lt;&lt;list[i].SGPA;
}
cout&lt;&lt;&quot;\n&quot;;
}

// BUBBLE SORT FUNCTION
void student::bubble_sort( student list[])
{
int i,j,c=0;
struct student key;
for(i=0; i&lt;size; i++)
{
for(j=0; j&lt;(size-1-i); j++)
{
if(list[j].roll_no&gt;list[j+1].roll_no)
{
key=list[j];
list[j]=list[j+1];
list[j+1]=key;
}
c++;

}
}
cout&lt;&lt;&quot;\n&quot;;
cout&lt;&lt;&quot;\nNumber of passes is: &quot;&lt;&lt;c;
}
// INSERTION SORT FUNCTION
void student::insert_sort( student list[])
{
int k,j,c=0;
student key;
for(k=1; k&lt;size; k++)
{
key=list[k];
j=k-1;
while(strcmp(list[j].name,key.name)&gt;0 &amp;&amp; j&gt;=0)
{
list[j+1]=list[j];
j--;
c++;
}
list[j+1]=key;
}
cout&lt;&lt;&quot;\nNumber of passes is: &quot;&lt;&lt;c;
}
// QUICK SORT FUNCTION
void student::quick_sort( student list[],int first,int last)
{
int pivot,i,j;

if(first &lt; last)
{

pivot = first;
i = first;
j = last;

while(i &lt; j)
{

while(list[i].SGPA &gt;= list[pivot].SGPA &amp;&amp; i &lt; last)
{
i++;
}

while(list[j].SGPA&lt;list[pivot].SGPA)
{
j--;
}
if(i&lt;j){
swap(list[i],list[j]);
}
}

swap(list[pivot], list[j]);
quick_sort(list,first,j-1);
quick_sort(list,j+1,last);
}
}
void swap(student a,student b){
student temp;
temp=a;
a=b;
b=temp;
}

// SEARCH FUNCTION
void student::search( student list[])
{
float SGPA;
int i;
cout&lt;&lt;&quot;\n Enter SGPA:&quot;;
cin&gt;&gt;SGPA;

cout&lt;&lt;&quot;\n Roll- Number \t Name \t SGPA \n&quot;;
for(int i=0; i&lt;size; i++)
{
if(SGPA==list[i].SGPA)
cout&lt;&lt;&quot;\n&quot;&lt;&lt;list[i].roll_no&lt;&lt;&quot;\t&quot;&lt;&lt;list[i].name&lt;&lt;&quot;\t&quot;&lt;&lt;list[i].SGPA;
}
}
// BINARY SEARCH FUNCTION
void student::binary_search( student list[])
{
int k, lower,upper,mid;
char search[80];
cout&lt;&lt;&quot;\n Enter Name Of Student You Want To Search: &quot;;
cin&gt;&gt;search;

lower=0;
upper=size-1;
mid=(lower+upper)/2;

while(lower&lt;=upper)
{
if(strcmp(list[mid].name, search)&lt;0)
lower=mid+1;

else if(strcmp(list[mid].name, search)==0)
{
cout&lt;&lt;&quot;\n&quot;&lt;&lt;list[mid].roll_no&lt;&lt;&quot;\t&quot;&lt;&lt;list[mid].name&lt;&lt;&quot;\t&quot;&lt;&lt;list[mid].SGPA;
break;
}
else
upper=mid-1;
mid=(lower+upper)/2;
}
if(lower&gt;upper)
cout&lt;&lt;search&lt;&lt;&quot;Not Found In The List&quot;;
}
// MAIN FUNCTION
int main()
{
int ch,i;
student data[20],s;
s.accept(data);
do
{
cout&lt;&lt;&quot;\n&quot;;
cout&lt;&lt;&quot;\n 1) Bubble Sort&quot;;
cout&lt;&lt;&quot;\n 2) Insertion Sort&quot;;
cout&lt;&lt;&quot;\n 3) Quick Sort &quot;;
cout&lt;&lt;&quot;\n 4) Search &quot;;
cout&lt;&lt;&quot;\n 5) Binary Search &quot;;
cout&lt;&lt;&quot;\n 6) Exit \n&quot;;
cout&lt;&lt;&quot;\n Select Your Choice: &quot;;
cin&gt;&gt;ch;
switch(ch)

{
case 1:
s.bubble_sort(data);
s.display(data);
break;

case 2:
s.insert_sort(data);
s.display(data);
break;

case 3:
s.quick_sort(data,0,s.size-1);
s.display(data);
break;

case 4:
s.search(data);
s.display(data);
break;

case 5:

s.binary_search(data);
s.display(data);
break;

case 6:
cout&lt;&lt;&quot;\nYou Have Successfully Exitted!!!.&quot;;
break;

default:
cout&lt;&lt;&quot;\nPlease Enter Valid Choice.\n&quot;;

}
}
while(ch!=6);
return 0;
}
